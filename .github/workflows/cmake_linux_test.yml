name: Linux Test

permissions:
  contents: write

on:
  workflow_dispatch:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT_NAME: "ZLTest"
  PRODUCT_NAME: "ZL Test"
  BUILD_TYPE: Release
  BUILD_DIR: Builds
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DISPLAY: :0 # linux pluginval needs this
  CMAKE_BUILD_PARALLEL_LEVEL: 3 # Use up to 3 cpus to build juceaide, etc
  HOMEBREW_NO_INSTALL_CLEANUP: 1

# jobs are run in paralell on different machines
# all steps run in series
jobs:
  build_and_test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        include:
          - name: Linux
            os: ubuntu-22.04
            pluginval-binary: ./pluginval
            ccache: ccache

    steps:

    - name: Upgrade to Linux lunar
      run: |
        sudo apt update && sudo apt dist-upgrade
        sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu/ lunar main restricted universe multiverse"
        sudo apt update && sudo apt upgrade

    # This is just easier than debugging different compilers on different platforms
    - name: Set up Clang
      uses: egor-tensin/setup-clang@v1

    # This also starts up our "fake" display Xvfb, needed for pluginval
    - name: Install JUCE's Linux Deps
      # Thanks to McMartin & co https://forum.juce.com/t/list-of-juce-dependencies-under-linux/15121/44
      run: |
        sudo apt update
        sudo apt-get install libasound2-dev libjack-jackd2-dev \
                        ladspa-sdk \
                        libcurl4-openssl-dev  \
                        libfreetype6-dev \
                        libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev \
                        libwebkit2gtk-4.0-dev \
                        libglu1-mesa-dev mesa-common-dev \
                        xvfb ninja-build
        sudo /usr/bin/Xvfb $DISPLAY &

    - name: Check JUCE's Linux Deps
      run: |
        sudo apt-get -y install apt-show-versions
        apt-show-versions libasound2-dev libjack-jackd2-dev \
                        ladspa-sdk \
                        libcurl4-openssl-dev  \
                        libfreetype6-dev \
                        libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev \
                        libwebkit2gtk-4.0-dev \
                        libglu1-mesa-dev mesa-common-dev \
                        xvfb ninja-build

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: true # Get JUCE populated

    - name: Install boost
      uses: MarkusJx/install-boost@v2.4.4
      id: install-boost
      with:
        boost_version: 1.80.0

    - name: Setup Environment Variables
      shell: bash
      run: |
        VERSION=$(cat VERSION)
        echo "ARTIFACTS_PATH=${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}" >> $GITHUB_ENV
        echo "VST3_PATH=${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/VST3/${{ env.PRODUCT_NAME }}.vst3" >> $GITHUB_ENV
        echo "AU_PATH=${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/AU/${{ env.PRODUCT_NAME }}.component" >> $GITHUB_ENV
        echo "AUV3_PATH=${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/AUv3/${{ env.PRODUCT_NAME }}.appex" >> $GITHUB_ENV
        echo "INSTALLER_NAME=${{ env.PROJECT_NAME }}-$VERSION" >> $GITHUB_ENV

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: v3-${{ matrix.os }}-${{ matrix.type }}
        variant: ${{ matrix.ccache }}

    - name: Configure
      shell: bash
      run: cmake -B ${{ env.BUILD_DIR }} -G Ninja -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}} -DCMAKE_C_COMPILER_LAUNCHER=${{ matrix.ccache }} -DCMAKE_CXX_COMPILER_LAUNCHER=${{ matrix.ccache }} -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" .
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build
      shell: bash
      run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} --parallel 4

    - name: Pluginval
      working-directory: ${{ env.BUILD_DIR }}
      shell: bash
      run: |
        curl -LO "https://github.com/Tracktion/pluginval/releases/download/v1.0.3/pluginval_${{ matrix.name }}.zip"
        7z x pluginval_${{ matrix.name }}.zip
        ${{ matrix.pluginval-binary }} --strictness-level 10 --verbose --validate-in-process "${{ env.VST3_PATH }}" || exit 1

    - name: Pluginval extra validations
      working-directory: ${{ env.BUILD_DIR }}
      shell: bash
      run: |
        ${{ matrix.pluginval-binary }} --strictness-level 10 --verbose --validate-in-process "${{ env.VST3_PATH }}" || exit 1
        ${{ matrix.pluginval-binary }} --strictness-level 10 --verbose --validate-in-process "${{ env.VST3_PATH }}" || exit 1
        ${{ matrix.pluginval-binary }} --strictness-level 10 --verbose --validate-in-process "${{ env.VST3_PATH }}" || exit 1
        ${{ matrix.pluginval-binary }} --strictness-level 10 --verbose --validate-in-process "${{ env.VST3_PATH }}" || exit 1

    - name: Zip
      if: ${{ matrix.name == 'Linux' }}
      working-directory: ${{ env.ARTIFACTS_PATH }}
      run: 7z a -tzip ${{ env.INSTALLER_NAME }}.zip .

    - name: Delete Artifacts
      uses: geekyeggo/delete-artifact@v2
      with:
        name: ${{ env.INSTALLER_NAME }}.zip